// Code generated by "stringer -type=Pad -trimprefix=Pad"; DO NOT EDIT.

package mikro

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PadNumber13-0]
	_ = x[PadNumber14-1]
	_ = x[PadNumber15-2]
	_ = x[PadNumber16-3]
	_ = x[PadNumber9-4]
	_ = x[PadNumber10-5]
	_ = x[PadNumber11-6]
	_ = x[PadNumber12-7]
	_ = x[PadNumber5-8]
	_ = x[PadNumber6-9]
	_ = x[PadNumber7-10]
	_ = x[PadNumber8-11]
	_ = x[PadNumber1-12]
	_ = x[PadNumber2-13]
	_ = x[PadNumber3-14]
	_ = x[PadNumber4-15]
}

const _Pad_name = "Number13Number14Number15Number16Number9Number10Number11Number12Number5Number6Number7Number8Number1Number2Number3Number4"

var _Pad_index = [...]uint8{0, 8, 16, 24, 32, 39, 47, 55, 63, 70, 77, 84, 91, 98, 105, 112, 119}

func (i Pad) String() string {
	if i >= Pad(len(_Pad_index)-1) {
		return "Pad(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Pad_name[_Pad_index[i]:_Pad_index[i+1]]
}
